# -*- coding: utf-8 -*-
"""Data mining assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3OVWstgdTpn3RHv33EoVe-0phi3XsZn
"""

import numpy as np
import pandas as pd
import json
json_file_path = "/content/neighbor-districts-modified.json"
with open(json_file_path, 'r') as j:
     contents = json.loads(j.read())
     print(contents)

# Python program for
# validation of a graph

# import dictionary for graph
from collections import defaultdict
import numpy as np
import pandas as pd
import json
json_file_path = "/content/neighbor-districts1.json"
with open(json_file_path, 'r') as j:
     contents = json.loads(j.read())

# function for adding edge to graph
graph = contents
def addEdge(graph,u,v):
	graph[u].append(v)

# definition of function
def generate_edges(graph):
	edges = []

	# for each node in graph
	for node in graph:
		
		# for each neighbour node of a single node
		for neighbour in graph[node]:
			
			# if edge exists then append
			edges.append((node, neighbour))
	return edges


# Driver Function call
# to print generated graph
# Adjascency List representation in Python
adj_list = {}
mylist = []
def add_node(node):
  if node not in mylist:
    mylist.append(node)
  else:
    print("Node ",node," already exists!")
 
def add_edge(node1, node2):
  temp = []
  if node1 in mylist and node2 in mylist:
    if node1 not in adj_list:
      temp.append(node2)
      adj_list[node1] = temp
   
    elif node1 in adj_list:
      temp.extend(adj_list[node1])
      temp.append(node2)
      adj_list[node1] = temp
       
  else:
    print("Nodes don't exist!")
 
def graph():
  for node in adj_list:
    print(node, " ---> ", [i for i in adj_list[node]])
 
#Adding nodes
for x in range(723):
  add_node(generate_edges(contents)[x][0])
#Adding edges
for y in range(3960):
  add_edge(generate_edges(contents)[y][0],generate_edges(contents)[y][1])
 
#Printing the graph
graph()
 
#Printing the adjacency list
print(adj_list)

import numpy as np
import pandas as pd
df1 = pd.read_csv("/content/raw_data1.csv")
df2 = pd.read_csv("/content/common district.csv")
df2_district_list = df2["District"].tolist()
df1_district_list = df1["Detected District"].tolist()
df2_sum = df2["sum"].tolist()
df1_sum = df1["Num Cases"].tolist()
for i in range(len(df1)):
  if (df1_district_list[i] in df2_district_list):
    k=(df2_district_list.index(df1_district_list[i]))
    df2_sum[k] = df2_sum[k] + df1_sum[df1_district_list.index(df1_district_list[i])]
print(df2_sum)
len(df2_sum)

#state wise overall
import numpy as np
import pandas as pd
df1 = pd.read_csv("cowin_vaccine_data_statewise (1).csv")
groupby_sum1 = df1.groupby(['State']).sum() 
print(groupby_sum1[['First Dose Administered','Second Dose Administered']])
groupby_sum1[['First Dose Administered','Second Dose Administered']].to_csv("vaccinated_count_time_state.csv")

#weekly statewise
import numpy as np
import pandas as pd
df1 = pd.read_csv("cowin_vaccine_data_districtwise.csv")
groupby_sum1 = df1.groupby(['State']).sum() 


from datetime import datetime
df1['Updated On'] = df1['Updated On'].astype('datetime64[ns]')

weekly_data = df1.groupby(["State"]).resample('W-Wed', label='right', closed = 'right', on='Updated On').sum().reset_index().sort_values(by='Updated On')
w = (weekly_data[["Updated On","State","First Dose Administered","Second Dose Administered"]])
w.to_csv("vaccinated-count-time_district.csv")