# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TdH8_AUoJJdtRv6BWw5Lz89TZGvyUp8-
"""

# Python program for
# validation of a graph

# import dictionary for graph
from collections import defaultdict
import numpy as np
import pandas as pd
import json
json_file_path = "neighbor-districts-modified.json"
with open(json_file_path, 'r') as j:
     contents = json.loads(j.read())

# function for adding edge to graph
graph = contents
def addEdge(graph,u,v):
	graph[u].append(v)

# definition of function
def generate_edges(graph):
	edges = []

	# for each node in graph
	for node in graph:
		
		# for each neighbour node of a single node
		for neighbour in graph[node]:
			
			# if edge exists then append
			edges.append((node, neighbour))
	return edges


# Driver Function call
# to print generated graph
# Adjascency List representation in Python
adj_list = {}
mylist = []
def add_node(node):
  if node not in mylist:
    mylist.append(node)
  else:
    print("Node ",node," already exists!")
 
def add_edge(node1, node2):
  temp = []
  if node1 in mylist and node2 in mylist:
    if node1 not in adj_list:
      temp.append(node2)
      adj_list[node1] = temp
   
    elif node1 in adj_list:
      temp.extend(adj_list[node1])
      temp.append(node2)
      adj_list[node1] = temp
       
  else:
    print("Nodes don't exist!")
 
def graph():
  for node in adj_list:
    print(node, " ---> ", [i for i in adj_list[node]])
 
#Adding nodes
for x in range(723):
  add_node(generate_edges(contents)[x][0])
#Adding edges
for y in range(3960):
  add_edge(generate_edges(contents)[y][0],generate_edges(contents)[y][1])
 
#Printing the graph
graph()
 
#Printing the adjacency list
print(adj_list)
adj_list.to_csv("edge-graph.csv")
